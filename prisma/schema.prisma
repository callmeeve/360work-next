// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  EMPLOYEE
  MANAGER
}

enum Gender {
  PRIA
  WANITA
}

enum JobStatus {
  CONTRACT
  PERMANENT
  PROJECT
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  OVER_TIME
  LEAVE
  LEAVE_EARLY
}

enum TaskStatus {
  IN_PROGRESS
  COMPLETED
}

enum TaskReportStatus {
  UNVERIFIED
  VERIFIED
  REJECTED
}

enum Days {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

model User {
  id           Int            @id @default(autoincrement())
  username     String
  email        String         @unique
  password     String
  role         Role
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Employee     Employee?
  Manager      Manager?
  Notification Notification[]
}

model Manager {
  id        Int        @id @default(autoincrement())
  name      String?
  secretKey String     @unique
  userId    Int        @unique
  companyId Int?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  User      User       @relation(fields: [userId], references: [id])
  Employee  Employee[]
  Company   Company?   @relation(fields: [companyId], references: [id])
  Task      Task[]
}

model Employee {
  id           Int          @id @default(autoincrement())
  name         String?
  address      String?
  birth_date   DateTime?
  gender       Gender?
  job_status   JobStatus
  phone        String?
  userId       Int          @unique
  companyId    Int
  departmentId Int
  managerId    Int
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  User         User         @relation(fields: [userId], references: [id])
  Company      Company      @relation(fields: [companyId], references: [id])
  Department   Department   @relation(fields: [departmentId], references: [id])
  Manager      Manager      @relation(fields: [managerId], references: [id])
  Attendance   Attendance[]
  Task         Task[]
  Schedule     Schedule[]
}

model Attendance {
  id         Int              @id @default(autoincrement())
  image      String?
  date       DateTime
  checkIn    DateTime
  checkOut   DateTime?
  status     AttendanceStatus
  employeeId Int
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  Employee   Employee         @relation(fields: [employeeId], references: [id])
}

model Schedule {
  id         Int        @id @default(autoincrement())
  startDate  DateTime
  endDate    DateTime
  startTime  DateTime
  endTime    DateTime
  employeeId Int
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  Employee   Employee   @relation(fields: [employeeId], references: [id])
}

model Company {
  id         Int          @id @default(autoincrement())
  email      String       @unique
  name       String
  address    String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Employee   Employee[]
  Department Department[]
  Manager    Manager[]
}

model Department {
  id        Int        @id @default(autoincrement())
  name      String
  companyId Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Company   Company    @relation(fields: [companyId], references: [id])
  Employee  Employee[]
}

model Task {
  id          Int          @id @default(autoincrement())
  title       String
  description String
  status      TaskStatus   @default(IN_PROGRESS)
  file        String?      @default("")
  employeeId  Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Employee    Employee     @relation(fields: [employeeId], references: [id])
  TaskReport  TaskReport[]
  Manager     Manager      @relation(fields: [managerId], references: [id])
  managerId   Int
}

model TaskReport {
  id          Int              @id @default(autoincrement())
  title       String
  description String
  file        String
  status      TaskReportStatus @default(UNVERIFIED)
  taskId      Int
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  Task        Task             @relation(fields: [taskId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  title     String
  message   String
  read      Boolean  @default(false)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
}
