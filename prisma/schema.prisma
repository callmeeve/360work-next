generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model attendance {
  id         Int               @id @default(autoincrement())
  statusIn     attendance_status?
  statusOut    attendance_status?
  employeeId Int
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  checkIn    DateTime?
  checkInImage String?
  checkOut   DateTime?
  checkOutImage String?
  workStart  DateTime?
  workEnd    DateTime?
  employee   employee          @relation(fields: [employeeId], references: [id], map: "Attendance_employeeId_fkey")

  @@index([employeeId], map: "Attendance_employeeId_fkey")
}


model company {
  id         Int          @id @default(autoincrement())
  email      String       @unique(map: "Company_email_key")
  name       String
  address    String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  department department[]
  employee   employee[]
  manager    manager[]
}

model department {
  id        Int        @id @default(autoincrement())
  name      String
  companyId Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  company   company    @relation(fields: [companyId], references: [id], map: "Department_companyId_fkey")
  employee  employee[]

  @@index([companyId], map: "Department_companyId_fkey")
}

model employee {
  id           Int                 @id @default(autoincrement())
  name         String?
  address      String?
  birth_date   DateTime?
  gender       employee_gender?
  job_status   employee_job_status
  phone        String?
  userId       Int                 @unique(map: "Employee_userId_key")
  companyId    Int
  departmentId Int
  managerId    Int
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  attendance   attendance[]
  company      company             @relation(fields: [companyId], references: [id], map: "Employee_companyId_fkey")
  department   department          @relation(fields: [departmentId], references: [id], map: "Employee_departmentId_fkey")
  manager      manager             @relation(fields: [managerId], references: [id], map: "Employee_managerId_fkey")
  user         user                @relation(fields: [userId], references: [id], map: "Employee_userId_fkey")
  task         task[]

  @@index([companyId], map: "Employee_companyId_fkey")
  @@index([departmentId], map: "Employee_departmentId_fkey")
  @@index([managerId], map: "Employee_managerId_fkey")
}

model manager {
  id        Int        @id @default(autoincrement())
  name      String?
  secretKey String     @unique(map: "Manager_secretKey_key")
  userId    Int        @unique(map: "Manager_userId_key")
  companyId Int?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  employee  employee[]
  company   company?   @relation(fields: [companyId], references: [id], map: "Manager_companyId_fkey")
  user      user       @relation(fields: [userId], references: [id], map: "Manager_userId_fkey")
  task      task[]

  @@index([companyId], map: "Manager_companyId_fkey")
}

model notification {
  id        Int      @id @default(autoincrement())
  title     String
  message   String
  read      Boolean  @default(false)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      user     @relation(fields: [userId], references: [id], map: "Notification_userId_fkey")

  @@index([userId], map: "Notification_userId_fkey")
}


model task {
  id          Int          @id @default(autoincrement())
  title       String
  description String
  status      task_status  @default(IN_PROGRESS)
  file        String?      @default("")
  employeeId  Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  managerId   Int
  employee    employee     @relation(fields: [employeeId], references: [id], map: "Task_employeeId_fkey")
  manager     manager      @relation(fields: [managerId], references: [id], map: "Task_managerId_fkey")
  taskreport  taskreport[]

  @@index([employeeId], map: "Task_employeeId_fkey")
  @@index([managerId], map: "Task_managerId_fkey")
}

model taskreport {
  id          Int               @id @default(autoincrement())
  title       String
  description String
  file        String
  status      taskreport_status @default(UNVERIFIED)
  taskId      Int
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  task        task              @relation(fields: [taskId], references: [id], map: "TaskReport_taskId_fkey")

  @@index([taskId], map: "TaskReport_taskId_fkey")
}

model user {
  id           Int            @id @default(autoincrement())
  username     String
  email        String         @unique(map: "User_email_key")
  password     String
  role         user_role
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  employee     employee?
  manager      manager?
  notification notification[]
}

enum attendance_status {
  PRESENT
  ABSENT
  LATE
  OVER_TIME
  LEAVE
  LEAVE_EARLY
}

enum task_status {
  IN_PROGRESS
  COMPLETED
}

enum employee_gender {
  PRIA
  WANITA
}

enum taskreport_status {
  UNVERIFIED
  VERIFIED
  REJECTED
}

enum user_role {
  ADMIN
  EMPLOYEE
  MANAGER
}

enum employee_job_status {
  CONTRACT
  PERMANENT
  PROJECT
}
